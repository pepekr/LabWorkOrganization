// <auto-generated />
using System;
using LabWorkOrganization.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LabWorkOrganization.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010140325_CourseNameChange")]
    partial class CourseNameChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndOfCourse")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("LessonDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.LabTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSentRequired")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("TimeLimitPerStudent")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.QueuePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SpecifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("QueuePlaces");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.SubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<int[]>("AllowedDays")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.UserTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("SubGroupUser", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubGroupsId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentsId", "SubGroupsId");

                    b.HasIndex("SubGroupsId");

                    b.ToTable("SubGroupUser");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.LabTask", b =>
                {
                    b.HasOne("LabWorkOrganization.Domain.Entities.Course", "Course")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.QueuePlace", b =>
                {
                    b.HasOne("LabWorkOrganization.Domain.Entities.SubGroup", "SubGroup")
                        .WithMany("Queue")
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabWorkOrganization.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.SubGroup", b =>
                {
                    b.HasOne("LabWorkOrganization.Domain.Entities.Course", "Course")
                        .WithMany("SubGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.User", b =>
                {
                    b.HasOne("LabWorkOrganization.Domain.Entities.Course", null)
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId");

                    b.HasOne("LabWorkOrganization.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.UserTask", b =>
                {
                    b.HasOne("LabWorkOrganization.Domain.Entities.LabTask", "Task")
                        .WithMany("userTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabWorkOrganization.Domain.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SubGroupUser", b =>
                {
                    b.HasOne("LabWorkOrganization.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabWorkOrganization.Domain.Entities.SubGroup", null)
                        .WithMany()
                        .HasForeignKey("SubGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.Course", b =>
                {
                    b.Navigation("SubGroups");

                    b.Navigation("Tasks");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.LabTask", b =>
                {
                    b.Navigation("userTasks");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.SubGroup", b =>
                {
                    b.Navigation("Queue");
                });

            modelBuilder.Entity("LabWorkOrganization.Domain.Entities.User", b =>
                {
                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
